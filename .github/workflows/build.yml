name: Build and Push Docker Images

on:
  schedule:
    - cron: "0 20 * * *"
  push:
    branches:
      - "main"
  workflow_dispatch:
    inputs:
      pg_version:
        description: "Optional: Build only this PostgreSQL major version (e.g., 16 or 17). Leave empty to build all versions defined in the matrix."
        required: false
        # No default, empty string '' means build all
        type: string
      force_build:
        description: "Force build even if image exists (true/false)."
        required: false
        type: boolean
        default: false

jobs:
  build-postgres:
    strategy:
      matrix:
        pg_version: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.pg_version != '' && fromJson(format('["{0}"]', github.event.inputs.pg_version)) || fromJson('["16","17"]') }}
    env:
      REGISTRY: ghcr.io
      REPO_NAME: ${{ github.repository }}
      PG_MAJOR_VERSION: ${{ matrix.pg_version }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      pg_version: ${{ matrix.pg_version }}
      FULL_IMAGE_TAG: ${{ steps.vars.outputs.FULL_IMAGE_TAG }}
      was_built: ${{ steps.build_step.outcome == 'success' }}
    steps:
      - uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Get variables
        id: vars
        run: |
          ./get_vars.sh

      - name: Build and push
        id: build_step
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          build-args: |
            BITNAMI_NAME=${{ steps.vars.outputs.BITNAMI_NAME }}
            PGVECTOR_NAME=${{ steps.vars.outputs.PGVECTOR_NAME }}
            PG_MAJOR_VERSION=${{ matrix.pg_version }}
          tags: |
            ${{ steps.vars.outputs.FULL_IMAGE_TAG }}
            ${{ steps.vars.outputs.TAG_SHORT }}
            ${{ steps.vars.outputs.TAG_FULL_PGVECTOR_POSTGRES }}
            ${{ env.REGISTRY }}/${{ env.REPO_NAME }}:pg${{ matrix.pg_version }}
            ${{ matrix.pg_version == '17' && github.event_name != 'pull_request' && format('{0}/{1}:latest', env.REGISTRY, env.REPO_NAME) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image,name=${{ env.REGISTRY }}/${{ env.REPO_NAME }},push-by-digest=false,name-canonical=true,push=${{ github.event_name != 'pull_request' }}
  test-runner-job:
    needs: build-postgres
    strategy:
      fail-fast: false # Optional: prevent job cancellations if one matrix job fails
      matrix:
        pg_version: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.pg_version != '' && fromJson(format('["{0}"]', github.event.inputs.pg_version)) || fromJson('["16","17"]') }}
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    # Docker Hub image that `container-job` executes in
    container: node:20-bookworm-slim

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Use the specific image tag built by the corresponding build job
        image: ${{ fromJson(needs.build-postgres.outputs.FULL_IMAGE_TAG)[format('{{"pg_version":"{0}"}}', matrix.pg_version)] }}
        # Provide the password for postgres
        ports:
          - 5432:5432
        env:
          POSTGRESQL_USERNAME: testuser
          POSTGRESQL_POSTGRES_PASSWORD: rootpassword
          POSTGRESQL_PASSWORD: testpassword
          POSTGRESQL_DATABASE: testdb
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd ["CMD-SHELL", "pg_isready -U postgres -h 0.0.0.0 -p 5432"]
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install test dependencies
        working-directory: ./tests
        run: npm install

      - name: Run User Test
        # Run step only if the corresponding build job actually built the image
        if: fromJson(needs.build-postgres.outputs.was_built)[format('{{"pg_version":"{0}"}}', matrix.pg_version)] == true
        working-directory: ./tests
        env:
          # Use standard PostgreSQL environment variables for connection within the test script
          PGHOST: postgres
          # Use the dynamically assigned host port
          PGPORT: 5432
          # To use vector extension, we need to use root user
          PGUSER: testuser
          PGPASSWORD: testpassword
          PGDATABASE: testdb
        run: npm run test

      - name: Run Vector Test
        # Run step only if the corresponding build job actually built the image
        if: fromJson(needs.build-postgres.outputs.was_built)[format('{{"pg_version":"{0}"}}', matrix.pg_version)] == true
        working-directory: ./tests
        env:
          # Use standard PostgreSQL environment variables for connection within the test script
          PGHOST: postgres
          # Use the dynamically assigned host port
          PGPORT: 5432
          # To use vector extension, we need to use root user
          PGUSER: postgres
          PGPASSWORD: rootpassword
          PGDATABASE: testdb
        run: npm run test:vector
