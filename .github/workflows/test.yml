name: Running Tests

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  # Label of the container job
  test-runner-job:
    name: Test PG ${{ matrix.pg_version }} # Add a custom name using the matrix variable
    # Containers must run in Linux based operating systems
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # Move fail-fast under strategy
      matrix:
        pg_version: [16, 17] # Add matrix for PostgreSQL versions
    # Docker Hub image that `container-job` executes in
    container: node:20-bookworm-slim

    # Service containers to run with `container-job`
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image using matrix variable
        image: ghcr.io/beshkenadze/bitnami-pgvector:pg${{ matrix.pg_version }}
        # Provide the password for postgres
        # Expose container port 5432, let Docker assign a random host port
        ports:
          - 5432 
        env:
          POSTGRESQL_USERNAME: testuser
          POSTGRESQL_POSTGRES_PASSWORD: rootpassword
          POSTGRESQL_PASSWORD: testpassword
          POSTGRESQL_DATABASE: testdb
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd 'pg_isready -U "postgres" -h 0.0.0.0 -p 5432'
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install test dependencies
        working-directory: ./tests
        run: npm install

      - name: Run User Test
        working-directory: ./tests
        env:
          # Use standard PostgreSQL environment variables for connection within the test script
          PGHOST: postgres
          # Use the dynamically assigned host port
          PGPORT: ${{ job.services.postgres.ports['5432'] }}
          # To use vector extension, we need to use root user
          PGUSER: testuser
          PGPASSWORD: testpassword 
          PGDATABASE: testdb
        run: npm run test 
    
      - name: Run Vector Test
        working-directory: ./tests
        env:
          # Use standard PostgreSQL environment variables for connection within the test script
          PGHOST: postgres
          # Use the dynamically assigned host port
          PGPORT: ${{ job.services.postgres.ports['5432'] }}
          # To use vector extension, we need to use root user
          PGUSER: postgres
          PGPASSWORD: rootpassword 
          PGDATABASE: testdb
        run: npm run test:vector